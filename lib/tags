!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AA	./sha1.c	42;"	d	file:
BB	./sha1.c	53;"	d	file:
BE32_FROM_PTR	./sha1.c	26;"	d	file:
BE32_FROM_PTR	./sha256.c	19;"	d	file:
BINARIES	./Makefile	/^BINARIES = test$/;"	m
BSIG0	./sha256.c	98;"	d	file:
BSIG1	./sha256.c	99;"	d	file:
CC	./Makefile	/^CC = gcc$/;"	m
CC	./sha1.c	64;"	d	file:
CFLAGS	./Makefile	/^CFLAGS = -g -Wall -fPIC -O2 -D_GNU_SOURCE -D_XOPEN_SOURCE=600$/;"	m
CH	./sha256.c	96;"	d	file:
DD	./sha1.c	75;"	d	file:
EMEOAEP_H_	./emeoaep.h	2;"	d
HEADERS	./Makefile	/^HEADERS = $(MP_HEADERS) rsa.h sha1.h sha256.h emeoaep.h$/;"	m
K00	./sha256.c	31;"	d	file:
K01	./sha256.c	32;"	d	file:
K02	./sha256.c	33;"	d	file:
K03	./sha256.c	34;"	d	file:
K04	./sha256.c	35;"	d	file:
K05	./sha256.c	36;"	d	file:
K06	./sha256.c	37;"	d	file:
K07	./sha256.c	38;"	d	file:
K08	./sha256.c	39;"	d	file:
K09	./sha256.c	40;"	d	file:
K10	./sha256.c	41;"	d	file:
K11	./sha256.c	42;"	d	file:
K12	./sha256.c	43;"	d	file:
K13	./sha256.c	44;"	d	file:
K14	./sha256.c	45;"	d	file:
K15	./sha256.c	46;"	d	file:
K16	./sha256.c	47;"	d	file:
K17	./sha256.c	48;"	d	file:
K18	./sha256.c	49;"	d	file:
K19	./sha256.c	50;"	d	file:
K20	./sha256.c	51;"	d	file:
K21	./sha256.c	52;"	d	file:
K22	./sha256.c	53;"	d	file:
K23	./sha256.c	54;"	d	file:
K24	./sha256.c	55;"	d	file:
K25	./sha256.c	56;"	d	file:
K26	./sha256.c	57;"	d	file:
K27	./sha256.c	58;"	d	file:
K28	./sha256.c	59;"	d	file:
K29	./sha256.c	60;"	d	file:
K30	./sha256.c	61;"	d	file:
K31	./sha256.c	62;"	d	file:
K32	./sha256.c	63;"	d	file:
K33	./sha256.c	64;"	d	file:
K34	./sha256.c	65;"	d	file:
K35	./sha256.c	66;"	d	file:
K36	./sha256.c	67;"	d	file:
K37	./sha256.c	68;"	d	file:
K38	./sha256.c	69;"	d	file:
K39	./sha256.c	70;"	d	file:
K40	./sha256.c	71;"	d	file:
K41	./sha256.c	72;"	d	file:
K42	./sha256.c	73;"	d	file:
K43	./sha256.c	74;"	d	file:
K44	./sha256.c	75;"	d	file:
K45	./sha256.c	76;"	d	file:
K46	./sha256.c	77;"	d	file:
K47	./sha256.c	78;"	d	file:
K48	./sha256.c	79;"	d	file:
K49	./sha256.c	80;"	d	file:
K50	./sha256.c	81;"	d	file:
K51	./sha256.c	82;"	d	file:
K52	./sha256.c	83;"	d	file:
K53	./sha256.c	84;"	d	file:
K54	./sha256.c	85;"	d	file:
K55	./sha256.c	86;"	d	file:
K56	./sha256.c	87;"	d	file:
K57	./sha256.c	88;"	d	file:
K58	./sha256.c	89;"	d	file:
K59	./sha256.c	90;"	d	file:
K60	./sha256.c	91;"	d	file:
K61	./sha256.c	92;"	d	file:
K62	./sha256.c	93;"	d	file:
K63	./sha256.c	94;"	d	file:
LD	./Makefile	/^LD = ld$/;"	m
MAJ	./sha256.c	97;"	d	file:
MAX	./mp_common.h	14;"	d
MIN	./mp_common.h	13;"	d
MP_ALLOC_APPEND	./mp_common.h	6;"	d
MP_ALLOC_CHUNK	./mp_common.h	4;"	d
MP_ALLOC_DEFAULT	./mp_common.h	5;"	d
MP_CMP_EQ	./mp.h	23;"	d
MP_CMP_GT	./mp.h	24;"	d
MP_CMP_LT	./mp.h	25;"	d
MP_COMBA_DEPTH	./mp_common.h	10;"	d
MP_COMBA_STACK	./mp_common.h	11;"	d
MP_COMMON_H_	./mp_common.h	2;"	d
MP_COMPOSITE	./mp.h	/^	MP_COMPOSITE$/;"	e	enum:__anon2
MP_DEBUG	./mp_common.h	17;"	d
MP_DEBUG	./mp_common.h	19;"	d
MP_ERR	./mp.h	/^	MP_ERR,$/;"	e	enum:__anon2
MP_HEADERS	./Makefile	/^MP_HEADERS = mp.h mp_common.h$/;"	m
MP_H_	./mp.h	10;"	d
MP_INT_BASE	./mp.h	30;"	d
MP_INT_BITS	./mp.h	32;"	d
MP_INT_BITS_ALL	./mp.h	33;"	d
MP_INT_MASK	./mp.h	31;"	d
MP_KARATSUBA_CUTOFF	./mp_common.h	8;"	d
MP_MODEXP_STACK	./mp_mod_exp.c	9;"	d	file:
MP_NOMEM	./mp.h	/^	MP_NOMEM,$/;"	e	enum:__anon2
MP_OBJECTS	./Makefile	/^MP_OBJECTS = mp_util.o mp_copy.o mp_ensure.o mp_add.o \\$/;"	m
MP_OK	./mp.h	/^	MP_OK	= 0,$/;"	e	enum:__anon2
MP_SIGN_NEG	./mp.h	28;"	d
MP_SIGN_POS	./mp.h	27;"	d
MP_SOURCES	./Makefile	/^MP_SOURCES = mp_util.c mp_copy.c mp_ensure.c mp_add.c \\$/;"	m
OBJECTS	./Makefile	/^OBJECTS = $(MP_OBJECTS) rsa.o sha1.o sha256.o emeoaep.o$/;"	m
ROL32	./sha1.c	31;"	d	file:
ROL32	./sha256.c	24;"	d	file:
ROR32	./sha1.c	35;"	d	file:
ROR32	./sha256.c	28;"	d	file:
RSAKG_MILLER_RABIN_PARAM	./rsa.c	26;"	d	file:
RSAKG_TRIES_MAX	./rsa.c	25;"	d	file:
RSA_EXP_F0	./rsa.h	/^	RSA_EXP_F0 = 3,$/;"	e	enum:__anon1
RSA_EXP_F2	./rsa.h	/^	RSA_EXP_F2 = 17,$/;"	e	enum:__anon1
RSA_EXP_F4	./rsa.h	/^	RSA_EXP_F4 = 65537$/;"	e	enum:__anon1
RSA_H_	./rsa.h	18;"	d
SHA1_DIGEST_LEN	./sha1.h	4;"	d
SHA1_H_	./sha1.h	2;"	d
SHA256_BASIC	./sha256.c	103;"	d	file:
SHA256_DIGEST_LEN	./sha256.h	4;"	d
SHA256_H_	./sha256.h	2;"	d
SOURCES	./Makefile	/^SOURCES = rsa.c sha1.c sha256.c emeoaep.c$/;"	m
SSIG0	./sha256.c	100;"	d	file:
SSIG1	./sha256.c	101;"	d	file:
T0	./sha1.c	38;"	d	file:
T1	./sha1.c	39;"	d	file:
T2	./sha1.c	40;"	d	file:
_mp_abs_cmp	./mp_cmp.c	/^_mp_abs_cmp(const mp_int *a, const mp_int *b)$/;"	f
_mp_add	./mp_add.c	/^_mp_add(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
_mp_int_t	./mp.h	/^typedef uint32_t _mp_int_t;$/;"	t
_mp_long_t	./mp.h	/^typedef uint64_t _mp_long_t;$/;"	t
_mp_mul_comba	./mp_mul.c	/^_mp_mul_comba(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
_mp_mul_comba_ndig	./mp_mul.c	/^_mp_mul_comba_ndig(mp_int *c, const mp_int *a, const mp_int *b, int ndig)$/;"	f
_mp_mul_comba_upper	./mp_mul.c	/^_mp_mul_comba_upper(mp_int *c, const mp_int *a, const mp_int *b, int digit)$/;"	f
_mp_mul_karatsuba	./mp_mul.c	/^_mp_mul_karatsuba(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
_mp_mul_school	./mp_mul.c	/^_mp_mul_school(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
_mp_sqr_comba	./mp_sqr.c	/^_mp_sqr_comba(mp_int *c, const mp_int *a)$/;"	f
_mp_sqr_karatsuba	./mp_sqr.c	/^_mp_sqr_karatsuba(mp_int *c, const mp_int *x)$/;"	f
_mp_sqr_school	./mp_sqr.c	/^_mp_sqr_school(mp_int *c, const mp_int *a)$/;"	f
_mp_sub	./mp_sub.c	/^_mp_sub(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
alloc	./mp.h	/^	unsigned int	alloc;	\/* number of allocated digits *\/$/;"	m	struct:mp_int
buffer	./sha1.h	/^        uint8_t         buffer[64];     \/* 512-bit message buffer *\/$/;"	m	struct:sha1_context
buffer	./sha256.h	/^        uint8_t         buffer[64];     \/* 512-bit message buffer *\/$/;"	m	struct:sha256_context
count	./sha1.h	/^        uint32_t        count[2];       \/* data length counter *\/$/;"	m	struct:sha1_context
count	./sha256.h	/^        uint32_t        count[2];       \/* data length counter *\/$/;"	m	struct:sha256_context
dig	./mp.h	/^	_mp_int_t	*dig;	\/* malloc'ed array of digits *\/$/;"	m	struct:mp_int
emeoaep_sha1_decode	./emeoaep.c	/^emeoaep_sha1_decode(void *em, unsigned emlen, void *m, unsigned mlen, unsigned char phash[32])$/;"	f
emeoaep_sha1_encode	./emeoaep.c	/^emeoaep_sha1_encode(const void *m, unsigned mlen, const void *p, unsigned plen,$/;"	f
emeoaep_sha256_decode	./emeoaep.c	/^emeoaep_sha256_decode(void *em, unsigned emlen, void *m, unsigned mlen, unsigned char phash[32])$/;"	f
emeoaep_sha256_encode	./emeoaep.c	/^emeoaep_sha256_encode(const void *m, unsigned mlen, const void *p, unsigned plen,$/;"	f
flags	./mp.h	/^	unsigned int	flags;$/;"	m	struct:mp_int
main	./test.c	/^main(int argc, char *argv[])$/;"	f
mp_abs_cmp	./mp_cmp.c	/^mp_abs_cmp(const mp_int *a, const mp_int *b)$/;"	f
mp_add	./mp_add.c	/^mp_add(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
mp_canonicalize	./mp_util.c	/^mp_canonicalize(mp_int *a)$/;"	f
mp_clear	./mp_clear.c	/^mp_clear(mp_int *p)$/;"	f
mp_clearv	./mp_clear.c	/^mp_clearv(mp_int *a, ...)$/;"	f
mp_cmp	./mp_cmp.c	/^mp_cmp(const mp_int *a, const mp_int *b)$/;"	f
mp_copy	./mp_copy.c	/^mp_copy(mp_int *dst, const mp_int *src)$/;"	f
mp_dbg	./mp_util.c	/^mp_dbg(const mp_int *a, FILE *fp)$/;"	f
mp_div	./mp_div.c	/^mp_div(mp_int *q, mp_int *r, const mp_int *y, const mp_int *x)$/;"	f
mp_ensure	./mp_ensure.c	/^mp_ensure(mp_int *p, unsigned int new_size)$/;"	f
mp_gcd	./mp_gcd.c	/^mp_gcd(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
mp_init	./mp_init.c	/^mp_init(mp_int *p)$/;"	f
mp_initv	./mp_init.c	/^mp_initv(mp_int *a, ...)$/;"	f
mp_int	./mp.h	/^typedef struct mp_int {$/;"	s
mp_int	./mp.h	/^} mp_int;$/;"	t	typeref:struct:mp_int
mp_iseven	./mp.h	47;"	d
mp_isneg	./mp_util.c	/^mp_isneg(const mp_int *a)$/;"	f
mp_isodd	./mp.h	48;"	d
mp_isone	./mp_util.c	/^mp_isone(const mp_int *a)$/;"	f
mp_iszero	./mp_util.c	/^mp_iszero(const mp_int *a)$/;"	f
mp_mod_exp	./mp_mod_exp.c	/^mp_mod_exp(mp_int *res, const mp_int *a, const mp_int *y, const mp_int *b)$/;"	f
mp_mod_inv	./mp_mod_inv.c	/^mp_mod_inv(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
mp_mul	./mp_mul.c	/^mp_mul(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
mp_mul_dig	./mp_mul.c	/^mp_mul_dig(mp_int *c, const mp_int *a, _mp_int_t b)$/;"	f
mp_mul_ndig	./mp_mul.c	/^mp_mul_ndig(mp_int *c, const mp_int *a, const mp_int *b, int ndig)$/;"	f
mp_nr_bits	./mp_util.c	/^mp_nr_bits(const mp_int *a)$/;"	f
mp_primality_miller_rabin	./mp_primality.c	/^mp_primality_miller_rabin(const mp_int *m, int r,$/;"	f
mp_random	./mp_random.c	/^mp_random(mp_int *a, int size,$/;"	f
mp_reduce_barrett	./mp_reduce.c	/^mp_reduce_barrett(mp_int *c, const mp_int *a, const mp_int *b, const mp_int *mu)$/;"	f
mp_reduce_barrett_setup	./mp_reduce.c	/^mp_reduce_barrett_setup(mp_int *mu, const mp_int *b)$/;"	f
mp_set	./mp_set.c	/^mp_set(mp_int *a, unsigned long *val, unsigned int nval, int sign)$/;"	f
mp_set_one	./mp_set.c	/^mp_set_one(mp_int *a)$/;"	f
mp_set_sint	./mp_set.c	/^mp_set_sint(mp_int *a, long val)$/;"	f
mp_set_str	./mp_set.c	/^mp_set_str(mp_int *a, const char *str, int base)$/;"	f
mp_set_uchar	./mp_uchar.c	/^mp_set_uchar(mp_int *a, const unsigned char *buf, int len)$/;"	f
mp_set_uint	./mp_set.c	/^mp_set_uint(mp_int *a, unsigned long val)$/;"	f
mp_shl	./mp_shift.c	/^mp_shl(mp_int *a, unsigned int nr)$/;"	f
mp_shr	./mp_shift.c	/^mp_shr(mp_int *a, unsigned int nr)$/;"	f
mp_sqr	./mp_sqr.c	/^mp_sqr(mp_int *c, const mp_int *x)$/;"	f
mp_sub	./mp_sub.c	/^mp_sub(mp_int *c, const mp_int *a, const mp_int *b)$/;"	f
mp_swap	./mp_util.c	/^mp_swap(mp_int *a, mp_int *b)$/;"	f
mp_to_uchar	./mp_uchar.c	/^mp_to_uchar(const mp_int *a, unsigned char *buf, int len)$/;"	f
mp_zero	./mp_util.c	/^mp_zero(mp_int *a)$/;"	f
rnd	./test.c	/^rnd(void *buf, size_t len, void *ctx)$/;"	f	file:
rsa_rnd_prime	./rsa.c	/^rsa_rnd_prime(const mp_int *exp, int len, int triesmax, int param,$/;"	f	file:
rsacrtdp	./rsa.c	/^rsacrtdp(const mp_int *c, const mp_int *p, const mp_int *q, const mp_int *dp,$/;"	f
rsacrtkg	./rsa.c	/^rsacrtkg(unsigned int len, int exp, int (*rnd)(void *buf, size_t len, void *rndctx), void *rndctx,$/;"	f
rsadp	./rsa.c	/^rsadp(const mp_int *c, const mp_int *d, const mp_int *n, mp_int *m)$/;"	f
rsaep	./rsa.c	/^rsaep(const mp_int *m, int exp, const mp_int *n, mp_int *c)$/;"	f
rsakg	./rsa.c	/^rsakg(unsigned int len, int exp,$/;"	f
sha1_context	./sha1.h	/^struct sha1_context {$/;"	s
sha1_context_init	./sha1.c	/^sha1_context_init(struct sha1_context *ctx)$/;"	f
sha1_final	./sha1.c	/^sha1_final(struct sha1_context *ctx, unsigned char digest[20])$/;"	f
sha1_hash	./sha1.c	/^sha1_hash(uint32_t s[8], const unsigned char buffer[64])$/;"	f
sha1_update	./sha1.c	/^sha1_update(struct sha1_context *ctx, const void *msg, u_int32_t msglen)$/;"	f
sha256_context	./sha256.h	/^struct sha256_context {$/;"	s
sha256_context_init	./sha256.c	/^sha256_context_init(struct sha256_context *ctx)$/;"	f
sha256_final	./sha256.c	/^sha256_final(struct sha256_context *ctx, unsigned char digest[32])$/;"	f
sha256_hash	./sha256.c	/^sha256_hash(uint32_t s[8], const unsigned char buffer[64])$/;"	f
sha256_update	./sha256.c	/^sha256_update(struct sha256_context *ctx, const void *msg, u_int32_t msglen)$/;"	f
sign	./mp.h	/^	int		sign;	\/* MP_SIGN_POS or MP_SIGN_NEG *\/$/;"	m	struct:mp_int
state	./sha1.h	/^        uint32_t        state[5];       \/* H(i) hash state *\/$/;"	m	struct:sha1_context
state	./sha256.h	/^        uint32_t        state[8];       \/* H(i) hash state *\/$/;"	m	struct:sha256_context
test_gcd	./test.c	/^test_gcd()$/;"	f
test_rsa	./test.c	/^test_rsa()$/;"	f
test_rsacrt	./test.c	/^test_rsacrt()$/;"	f
test_sha1_oaep	./test.c	/^test_sha1_oaep()$/;"	f
testrnd	./test.c	/^testrnd(void *buf, size_t len, void *ctx)$/;"	f	file:
top	./mp.h	/^	int		top;	\/* index to top digit *\/$/;"	m	struct:mp_int
uint32_to_bytes	./sha1.c	/^uint32_to_bytes(unsigned char *out, const u_int32_t *in, unsigned int n)$/;"	f	file:
uint32_to_bytes	./sha256.c	/^uint32_to_bytes(unsigned char *out, const u_int32_t *in, unsigned int n)$/;"	f	file:
urandom	./test.c	/^urandom(void *buf, size_t len)$/;"	f
