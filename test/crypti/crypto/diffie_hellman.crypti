
//public keys
p = 0xda3a8085d372437805de95b88b675122f575df976610c6a844de99f1df82a06848bf7a42f18895c97402e81118e01a00d0855d51922f434c022350861d58ddf60d65bc6941fc6064b147071a4c30426d82fc90d888f94990267c64beef8c304a4b2b26fb93724d6a9472fa16bc50c5b9b8b59afb62cfe9ea3ba042c73a6ade35
g = 0xa51883e9ac0539859df3d25c716437008bb4bd8ec4786eb4bc643299daef5e3e5af5863a6ac40a597b83a27583f6a658d408825105b16d31b6ed088fc623f648fd6d95e9cefcb0745763cddf564c87bcf4ba7928e74fd6a3080481f588d535e4c026b58a21e1e5ec412ff241b436043e29173f1dc6cb943c09742de989547288

/*
 * Alice function
 */
def [E] Alice(p, g, key) {
	E = mod_exp(g, key, p)
}

/*
 * Bob function
 */
def [E] Bob(p, g, key) {
	E = mod_exp(g, key, p)
}

//a is private Alice key
a = 7
//b is private Bob key
b = 13

A = Alice(p, g, a)
B = Bob(p, g, b)

K1 = Alice(p, B, a)
K2 = Bob(p, A, b)

if (K1 == K2) {
	printf("Diffie - Hellman key exchange ok\n");
} else {
	printf("Diffie - Hellman key excange fail\n");
	printf("K1 = %d, K2 = %d\n", K1, K2);
}
