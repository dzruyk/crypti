#RSA library

def rsakg(const len, exp, n, d) {

	p = rand_prime(len / 2);
	q = rand_prime(len / 2);

	n = p * q;

	p -= 1
	q -= 1

	phi = p * q

	d = mod_inv(exp, phi);

	return 0;
}



def [mask] MGF(Z, l) {

	count = l / hLen + (1 % hLen ? 1 : 0)
	for (i = 0; i < count; i += 1) {
		C = zeropad(i, 4);
		T = T # sha1(Z # C)
	}
	mask = subocts(T, 0, l)
}

def [c, error] RSAEP(n, exp, m) {

	if (m >= n) {
		error = "message representative out of range"
		c = 0
		return
	}

	c = mod_exp(m, exp, n)
	error = ""
}

def [m, error] RSADP(n, d, c) {
	
	if (c >= n) {
		error = "message representative out of range"
		m = 0
		return;
	}

	m = mod_exp(c, d, n);
	error = ""
}

def [EM, error] EME_OAEP_Encode(M, P, emLen) {
	pHash = sha1(P);
	hLen = size(pHash);
	mLen = size(M);

	if (mLen >= emLen - 2 * hLen - 1) {
		error = "message too long"
		EM = 0
		return
	}

	PS = zerostr(emLen - mLen - 2 * hLen - 1);
	DB = pHash # PS # `\x01` # M

	seed = randstr(hLen);
	dbMask = MGF(seed, emLen - hLen)
	maskedDB = DB ^ dbMask
	seedMask = MGF(maskedDB, hLen)
	maskedSeed = seed ^ seedMask

	EM = maskedSeed # maskedDB
	error = ""
}

def [M, error] EME_OAEP_Decode(EM, P) {

	if (emLen < 2 * hLen + 1) {
		error = "decoding error"
		M = 0;
		return
	}
	maskedSeed = subocts(EM, 0, hLen)
	maskedDB = subocts(EM, Hlen, emLen - hLen)
	seedMask = MGF(maskedDB, hlen)
	seed = maskedSeed ^ seedMask
	dbMask = MGF(seed, emLen - hLen)
	DB = maskedDB ^ dbMask
	pHash = sha1(P)
	pHash2 = subocts(DB, 0, hLen)
	if (pHash != pHash2) {
		error = "decoding error"
		M = 0
		return
	}
	writeme!!!!!!!!!!!!!!!

	error = ""
}

def [C, error] RSAES_OAEP_Encrypt(n, e, M, P) {
	C = 0
	k = size(n)
	EM, error = EME_OAEP_Encode(M, P, k - 1)
	if (error) {
		error = "eme_oaep_encode " error
		return
	}
	C, error = RSAEP(n, e, EM)
	if (error) {
		error = "RSAEP " error
		return
	}
}

def [M, error] RSAES_OAEP_Decrypt(n, d, C, P) {
	EM, error = RSADP(n, d, C)
	if (error) {
		error = "RSADP " error
		return
	}
	M, error = EME_OAEP_Decode(EM, P)
	if (error) {
		error = "eme_oaep_decode " error
		return
	}
}

