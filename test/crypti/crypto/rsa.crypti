//RSA library

hLen = size(sha1(``))

/*
def [] rsakg(len, exp, n, d) {

	p = randprime(len / 2);
	q = randprime(len / 2);

	n = p * q;

	p -= 1
	q -= 1

	phi = p * q

	d = mod_inv(exp, phi);

	return;
}
*/


def [mask] MGF(Z, l) {

	count = l / hLen + (1 % hLen ? 1 : 0)
	T = ``
	for (i = 0; i < count; i += 1) {
		//C = zeropad(i, 4);
		C = rpad(``, 4, `\x00`);
		T = T # sha1(Z # C)
	}
	mask = subocts(T, 0, l)
}

def [c, error] RSAEP(n, exp, m) {

	if (m >= n) {
		error = "message representative out of range"
		c = 0
		return
	}

	c = mod_exp(m, exp, n)
	error = ""
}

def [m, error] RSADP(n, d, c) {
	
	if (c >= n) {
		error = "message representative out of range"
		m = 0
		return;
	}

	m = mod_exp(c, d, n);
	error = ""
}

def [EM, error] EME_OAEP_Encode(M, P, emLen) {
	pHash = sha1(P);
	mLen = size(M);

	if (mLen >= emLen - 2 * hLen - 1) {
		error = "message too long"
		EM = 0
		return
	}

	PS = rpad(``, emLen - mLen - 2 * hLen - 1, `\x00`);
	DB = pHash # PS # `\x01` # M

	seed = randocts(hLen);
	dbMask = MGF(seed, emLen - hLen)
	maskedDB = DB ^ dbMask
	seedMask = MGF(maskedDB, hLen)
	maskedSeed = seed ^ seedMask

	EM = maskedSeed # maskedDB
	error = ""
}

def [idx] skip_ps(s) {
	idx = -1
	for (i = 0; i < size(s); i+=1) {
		ch = subocts(s, i, 1);
		if (ch == `\x01`) {
			idx = i;
			return;
		} else if (ch == `\x00`) {
			continue;
		} else {
			break;
		}
	}
}

def [M, error] EME_OAEP_Decode(EM, P) {
	emLen = size(EM)
	if (emLen < 2 * hLen + 1) {
		error = "decoding error"
		M = 0;
		return
	}
	maskedSeed = subocts(EM, 0, hLen)
	maskedDB = subocts(EM, hLen, emLen - hLen)
	seedMask = MGF(maskedDB, hLen)
	seed = maskedSeed ^ seedMask
	dbMask = MGF(seed, emLen - hLen)
	DB = maskedDB ^ dbMask
	pHash = sha1(P)
	pHash2 = subocts(DB, 0, hLen)
	msg_start = skip_ps(subocts(DB, hLen + 1, size(DB)))
	if (pHash != pHash2 || msg_start == -1) {
		error = "decoding error"
		M = 0
		return
	}
	M = subocts(DB, hLen + msg_start + 2, size(DB))
	error = ""
}

def [C, error] RSAES_OAEP_Encrypt(n, e, M, P) {
	C = 0
	k = size(n)
	EM, error = EME_OAEP_Encode(M, P, k - 1)
	if (error) {
		error = "eme_oaep_encode " error
		return
	}
	C, error = RSAEP(n, e, EM)
	if (error) {
		error = "RSAEP " error
		return
	}
}

def [M, error] RSAES_OAEP_Decrypt(n, d, C, P) {
	EM, error = RSADP(n, d, C)
	if (error) {
		error = "RSADP " error
		return
	}
	M, error = EME_OAEP_Decode(EM, P)
	if (error) {
		error = "eme_oaep_decode " error
		return
	}
}


p = 164937809498693114066467408383914782333527197073511036987162167595522505138910091466343304701245525422116374834426971425227721548214532559674219220342937496611284194917663412121043440284783914805054028450034622664404548963465968167588865175878063342160088395936966476918173662869141689417625294310780618312389
q = 161414438690455166913945841202721236684257406486355983540000547295416410254210772029010565257527513977947983404388871117229928421359414306396411094759266738477229669629274353771573848566767631453505555567145121955951188523516188198578506911433360076528200612058731207470313388554358069481907987968704391147129
n = p * q
fi = (p - 1) * (q - 1)
e = 3
d = mod_inv(3, fi)

secret_msg = `Dz_lnly was here`
C, err = RSAES_OAEP_Encrypt(n, e, secret_msg, `padding`)

if (err) {
	printf("%s\n", err)
} else {
	printf("Decode successfull\n")
}

M1, err = RSAES_OAEP_Decrypt(n, d, C, `padding`)
printf("%s\n", M1 | 0x00);

