def [c, error] RSAEP(n, exp, m) {

        if (m >= n) {
                error = "message representative out of range"
                c = 0
                return
        }

        c = mod_exp(m, exp, n)
        error = ""
}

def [m, error] RSADP(n, d, c) {

        if (c >= n) {
                error = "message representative out of range"
                m = 0
                return;
        }

        m = mod_exp(c, d, n);
        error = ""
}

printf("RSA simple test (для диплома чтобы отстали)\n");

p = 164937809498693114066467408383914782333527197073511036987162167595522505138910091466343304701245525422116374834426971425227721548214532559674219220342937496611284194917663412121043440284783914805054028450034622664404548963465968167588865175878063342160088395936966476918173662869141689417625294310780618312389
q = 161414438690455166913945841202721236684257406486355983540000547295416410254210772029010565257527513977947983404388871117229928421359414306396411094759266738477229669629274353771573848566767631453505555567145121955951188523516188198578506911433360076528200612058731207470313388554358069481907987968704391147129
n = p * q
fi = (p - 1) * (q - 1)
e = 3
d = mod_inv(3, fi)

m = `Vasya pupkin bil zdes!`
printf("Message before encryption %s\n", m "")

c, e = RSAEP(n, e, m)
m1, e = RSADP(n, d, c)

printf("Encrypted string is %s\n", m1 | 0x00);

