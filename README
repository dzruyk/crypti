Crypti is simple language for crypto researchers, that I write from scratch.

NOTE:
For run crypti needs libmpl fork (it avaiable at https://github.com/dzruyk/libmp)

Now bignum library and string type not integrated in project and documentation available only on russian.



Short syntax description.

	prog 		->	global_expr
	
	global_expr	->	def func_name(argues) {stmts}
			|	import "modname"
			|	import <modname>
			|	stmts

	stmts		->	statesment
	
	statesment	->	{ stmts }
			|	if (logic_or) statesment [else statesment]
			|	for (expr; logic_or; expr) statesment
			|	while(logic_or) statesment
			|	do { stmts } while(logic_or);
			|	break
			|	continue
			|	return [expr]
			|	expr
	
	expr		->	logic_or = expr
				logic_or += expr
				logic_or *= expr
				logic_or /= expr
				logic_or |= expr
				logic_or ^= expr
				logic_or <<= expr
				logic_or >>= expr
				logic_or

	logic_or	->	logic_and [ || logic_or]
				logic_and

	logic_and	->	bool_or [ && bool_and]
				bool_or

	bool_or		->	bool_xor [ | bool_or]
				bool_xor

	bool_xor	->	bool_and [ ^ bool_xor]
				bool_and

	bool_and	->	equity	[ & bool_and]
				equity

	equity		->	rel_op [ == equity]
				rel_op

	rel_op		->	shift_expr [ > rel_op]
			|	shift_expr [ >= rel_op]
			|	shift_expr [ < rel_op]
			|	shift_expr [ <= rel_op]
			|	shift_expr
	
	shift_expr	->	add_expr >> shift_expr
				add_expr << shift_expr
				add_expr

	add_expr	->	mul_expr [ + add_expr]
			|	mul_expr [ - add_expr]

	mul_expr	->	term [ * mul_expr]
			|	term [ / mul_expr]

	
	term		->	!factor
			|	+factor
			|	-factor
			|	factor
	
	factor		->	(expr)
			|	identifier
			|	number
			|	EMPTY

	identifier	->	id
			|	id[logic_or]			//array reference
			|	id ([expr, ...])			//function call
	

Remarks:
1)	In id[statesment] statesment can't be EMPTY;
2)	Inside functions we can't define new functions;
3)	We can assign only to variables or array elements.

